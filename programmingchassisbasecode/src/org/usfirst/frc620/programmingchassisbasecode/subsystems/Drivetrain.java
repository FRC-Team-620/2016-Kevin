// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc620.programmingchassisbasecode.subsystems;

import org.usfirst.frc620.programmingchassisbasecode.RobotMap;
import org.usfirst.frc620.programmingchassisbasecode.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Drivetrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon cANTalon1 = RobotMap.drivetrainCANTalon1;
    private final CANTalon cANTalon2 = RobotMap.drivetrainCANTalon2;
    private final CANTalon cANTalon3 = RobotMap.drivetrainCANTalon3;
    private final CANTalon cANTalon4 = RobotMap.drivetrainCANTalon4;
    RobotDrive robotDrive41 = RobotMap.driveTrainRobotDrive41;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	
    	setDefaultCommand(new JoystickDrive());
    	
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void tankDrive(double speed, double turn) {
//    	robotDrive41.tankDrive(Math.min(turn*Math.abs(turn)+forward*Math.abs(forward),1),Math.min(-turn*Math.abs(turn)+forward*Math.abs(forward),1));
        robotDrive41.arcadeDrive(speed, -turn);
        
    }
    	
    
    public void mecanumDrive(double x, double y, double z, double gyro){
    	robotDrive41.mecanumDrive_Cartesian(x, y, z, gyro);
    }
}

